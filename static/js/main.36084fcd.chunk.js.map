{"version":3,"sources":["Components/Cards/Cards.module.css","Components/Cards/Cards.js","Api/index.js","Components/CountryPicker/CountryPicker.js","Components/Chart/Chart.js","App.js","index.js","Components/CountryPicker/CountryPicker.module.css","App.module.css","Components/Chart/Chart.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","CountryPicker","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchedCountryAPI","FormControl","formControl","heading","NativeSelect","defaultValue","onChange","e","target","i","key","Chart","setDailyData","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","App","state","fetchedData","setState","this","src","alt","image","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36084fcd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2MRa4\",\"card\":\"Cards_card__1NGCR\",\"infected\":\"Cards_infected__2GUTu\",\"recovered\":\"Cards_recovered__3wNoz\",\"deaths\":\"Cards_deaths__Qutan\"};","import React from 'react'\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards= ( { data: { confirmed, recovered, deaths, lastUpdate } } ) => {\r\n\r\n   if(!confirmed){\r\n       return 'Loading...'\r\n   }\r\n    return (\r\n        <div className = {styles.container}>\r\n            <Grid container spacing= {3} justify= \"center\">\r\n                <Grid item component = {Card}  xs = {12} md={3} className = {cx(styles.card, styles.infected)}>\r\n                   <CardContent>\r\n                       <Typography color = \"initial\" gutterBottom>Infected</Typography>\r\n                       <Typography variant = \"h5\">\r\n                           <CountUp start ={0} end={confirmed.value} duration = {2.5} separator = \",\"/> \r\n                        </Typography>\r\n                       <Typography color =\"initial\"> {new Date(lastUpdate).toDateString()} </Typography>\r\n                       <Typography variant = \"body2\"> Number of Corvid-19 active cases</Typography>\r\n                   </CardContent>\r\n                </Grid>\r\n                <Grid item component = {Card}  xs = {12} md={3} className = {cx(styles.card, styles.recovered)}>\r\n                   <CardContent>\r\n                       <Typography color = \"initial\" gutterBottom>Recovered</Typography>\r\n                       <Typography variant = \"h5\">\r\n                          <CountUp start ={0} end={recovered.value} duration = {2.5} separator = \",\"/> \r\n                       </Typography>\r\n                       <Typography color =\"initial\">{new Date(lastUpdate).toDateString()} </Typography>\r\n                       <Typography variant = \"body2\">Number of recoveries from Corvid-19</Typography>\r\n                   </CardContent>\r\n                </Grid>\r\n                <Grid item component = {Card}  xs = {12} md={3} className = {cx(styles.card, styles.deaths)}>\r\n                   <CardContent>\r\n                       <Typography color = \"initial\" gutterBottom>Deaths</Typography>\r\n                       <Typography variant = \"h5\">\r\n                         <CountUp start ={0} end={deaths.value} duration = {2.5} separator = \",\"/> \r\n                       </Typography>\r\n                       <Typography color =\"initial\">{new Date(lastUpdate).toDateString()} </Typography>\r\n                       <Typography variant = \"body2\">Number of deaths caused by Corvid-19</Typography>\r\n                   </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","\r\nimport axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\nexport const  fetchData = async(country) => {\r\n    let changeableUrl = url;\r\n\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n   try{\r\n       const { data } = await axios.get(changeableUrl);\r\n     \r\n       const modifiedData = {\r\n           confirmed: data.confirmed,\r\n           recovered: data.recovered, \r\n           deaths: data.deaths,\r\n           lastUpdate: data.lastUpdate\r\n       }\r\n      return modifiedData;\r\n   }catch(error){\r\n     return error\r\n   }\r\n}\r\n\r\nexport const fetchDailyData = async() =>{\r\n  \r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n         \r\n        const modifiedData = data.map((dailyData) =>({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n\r\n        return modifiedData;\r\n         \r\n    } catch (error) {\r\n        return error\r\n    }\r\n}\r\n\r\n\r\nexport const fetchCountries = async() =>{\r\n    try {\r\n        const { data: {countries} } = await axios.get(`${url}/countries`)\r\n         \r\n        return countries.map((country) => country.name)\r\n    } catch (error) {\r\n        \r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { NativeSelect, FormControl } from '@material-ui/core'\r\n\r\nimport { fetchCountries } from '../../Api'\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst CountryPicker = ({ handleCountryChange })=> {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchedCountryAPI = async ()=>{\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchedCountryAPI();\r\n    },[setFetchedCountries]) // useEffect will only change when setFetchedCountries change\r\n\r\n  \r\n    return (\r\n        <FormControl className = {styles.formControl}> \r\n        <h3 className = {styles.heading}> Select a country</h3>\r\n            <NativeSelect  className = {styles.name} defaultValue = \"\" onChange = {(e) => handleCountryChange(e.target.value)}>\r\n                <option value = \"\">Global</option>\r\n                {fetchedCountries.map((country,i) => <option key ={i} value ={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker\r\n","import React, { useState, useEffect } from 'react'\r\nimport { fetchDailyData } from '../../Api'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\n\r\nimport styles from './Chart.module.css'\r\n\r\n\r\nconst Chart = ({ data:{ confirmed, recovered, deaths }, country})=> {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() =>{\r\n    const fetchApi = async() =>{\r\n        setDailyData(await fetchDailyData());\r\n    }\r\n\r\n    fetchApi();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n       dailyData.length  ?\r\n       ( <Line \r\n        data = {{\r\n            labels: dailyData.map(({ date }) => date),\r\n            datasets: [{\r\n                data: dailyData.map(({ confirmed }) => confirmed),\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: false\r\n            },{\r\n                data: dailyData.map(({ deaths }) => deaths),\r\n                label: 'Deaths',\r\n                borderColor: 'red',\r\n                backgroundColor: 'rgba(255,0,0,0.5)',\r\n                fill: false\r\n            }]\r\n        }}\r\n        />): null\r\n    )\r\n\r\n \r\n    const barChart = (\r\n        confirmed ?\r\n        (<Bar\r\n         data = {{\r\n            labels: ['Infected', 'Recovered', 'Deaths'],\r\n             datasets:[{\r\n                 label: 'People',\r\n                 backgroundColor: ['rgba(0, 0, 200, 0.7)','rgb(0, 100, 0)','rgba(255, 0, 0, 1)'],\r\n                 data: [confirmed.value, recovered.value, deaths.value]\r\n             }]\r\n         }}\r\n         options = {{\r\n            legend: { display: false },\r\n            title: { display: true, text: `Current state in ${country}`}\r\n\r\n         }}\r\n        />): null\r\n    )\r\n    return (\r\n        <div className = {styles.container}>\r\n            {country? barChart: lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import React, { Component } from 'react'\r\nimport Cards from './Components/Cards/Cards'\r\nimport CountryPicker from './Components/CountryPicker/CountryPicker'\r\nimport Chart from './Components/Chart/Chart'\r\nimport styles from './App.module.css'\r\nimport { fetchData } from './Api'\r\n\r\n\r\n\r\n class App extends Component {\r\n        state ={\r\n            data: {},\r\n            country: ''\r\n        }\r\n   async componentDidMount(){\r\n        const fetchedData = await fetchData();\r\n        \r\n        this.setState({ data: fetchedData })\r\n    }\r\n\r\n    handleCountryChange = async(country) => {\r\n        const fetchedData = await fetchData(country);\r\n        \r\n        this.setState({ data: fetchedData, country: country })\r\n\r\n    }\r\n    render() {\r\n        const { data, country } = this.state\r\n        return (\r\n            <div className={styles.container}>\r\n                <img src=\"https://media.tghn.org/medialibrary/2020/04/covid19_logo.png\" alt= \"Covid-19\" className= {styles.image}/> \r\n                <h3>We can only hope for a better future. Another day is given to us if we overcome today.</h3>\r\n                <CountryPicker handleCountryChange = {this.handleCountryChange} />\r\n                <Cards data = {data} />\r\n                <Chart data = {data} country = {country} />\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__327oA\",\"name\":\"CountryPicker_name__1MBeA\",\"heading\":\"CountryPicker_heading__3qtOq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1tl01\",\"image\":\"App_image__1E_Zb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__14w5A\"};"],"sourceRoot":""}